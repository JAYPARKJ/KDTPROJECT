<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 공통 모듈 구현 하기 위한 SQL 작성 공통 코드 조회 위한 SQL쿼리문을 MyBatis XML 파일로 구현 -->

<mapper namespace="mapper.MemberMapper">

	<!-- 개별 회원정보 조회(검색) -->
	<select id="selectMemberById" parameterType="String"
		resultType="com.javateam.memberProject.domain.MemberVO">
		SELECT * FROM MEMBER_TBL
		WHERE id = #{id}
	</select>
	<!-- 전체 회원 조회 -->
	<select id="selectAllMembers"
		resultType="com.javateam.memberProject.domain.MemberVO">
		SELECT * FROM MEMBER_TBL
	</select>

	<!-- 회원정보 삽입(생성) -->
	<insert id="insertMember"
		parameterType="com.javateam.memberProject.domain.MemberVO">
		<!-- <selectKey order="AFTER" resultType="int" > 순서 살짝 바꿈 , 특정 key 컬럼은 
			넣으면 안됨 SELECT COUNT(*) FROM MEMBER_TBL WHERE ID = #{id} </selectKey> -->
		INSERT INTO
		MEMBER_TBL
		(
		ID
		, PW
		, NAME
		, GENDER
		, EMAIL
		, MOBILE
		, PHONE
		, ZIP
		, ROAD_ADDRESS
		, JIBUN_ADDRESS
		, DETAIL_ADDRESS
		, BIRTHDAY
		, JOINDATE
		)
		VALUES
		(
		#{id}
		, #{pw}
		, #{name}
		, #{gender}
		, #{email}
		, #{mobile}
		, #{phone}
		, #{zip}
		, #{roadAddress}
		, #{jibunAddress}
		, #{detailAddress}
		, #{birthday}
		, SYSDATE
		)
	</insert>

	<!-- 회원 정보 수정(갱신) -->
	<!-- 레코드가 있어야 업데이트 가능 -->
	<update id="updateMember"
		parameterType="com.javateam.memberProject.domain.MemberVO">

		<!-- 사전 처리 <selectKey order="BEFORE" resultType="int" > SELECT COUNT(*) 
			FROM MEMBER_TBL WHERE ID = #{id} </selectKey> -->
		UPDATE
		MEMBER_TBL
		<set>
			<if test="pw !=null">
				PW = #{pw}
			</if>
			<if test="email !=null ">
				, EMAIL = #{email}
			</if>
			<if test="mobile !=null">
				, MOBILE = #{mobile}
			</if>
			<if test="phone !=null">
				, PHONE = #{phone}
			</if>
			<if test="zip !=null">
				, ZIP = #{zip}
			</if>
			<if test="roadAddress !=null ">
				, ROAD_ADDRESS = #{roadAddress}
			</if>
			<if test="jibunAddress !=null ">
				, JIBUN_ADDRESS = #{jibunAddress}
			</if>
			<if test="detailAddress !=null">
				, DETAIL_ADDRESS = #{detailAddress}
			</if>
		</set>
		WHERE ID = #{id};
		<!-- SET PW = #{pw} , EMAIL = #{email} , MOBILE = #{mobile} , PHONE = #{phone} 
			, ZIP = #{zip} , ROAD_ADDRESS = #{roadAddress} , JIBUN_ADDRESS = #{jibunAddress} 
			, DETAIL_ADDRESS = #{detailAddress} 업데이트 할게 pw, id만 있었다면 MEMBER_TBL SET PW 
			= #{pw} WHERE ID = #{id}; -->
	</update>
	
	<!-- 회원정보 중복 점검(가입) : 아이디/이메일/휴대폰 -->
	<select id="hasMemberByFld" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER_TBL
		WHERE ${fld} = #{val}
	</select>

	<!-- 회원정보 중복 점검(수정) : 아이디/이메일/휴대폰 -->
	<select id="hasMemberForUpdate" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM ( SELECT ${fld}
		FROM MEMBER_TBL
		WHERE ID != #{id})
		WHERE ${fld} = #{val}
	</select>
	
	
 	<!-- 회원정보 검색(페이징) : 주소, 이름, 성별, 휴대폰, 일반전화, (이메일) -->
	<!-- select * from member_tbl where id='abcd1111'; delete from member_tbl 
	where id='abcd1111'; -->
	
	<!-- <select id="selectMembersBySearchingAndPaging"
		parameterType="map" resultType="map">

		SELECT *
		FROM ( SELECT m.*, FLOOR((ROWNUM - 1) / #{limit} + 1) PAGE
		
		FROM ( SELECT DISTINCT m3.*
		, ( SELECT LISTAGG(r2.ROLE, ',')
		WITHIN GROUP (ORDER BY m2.ID) FROM MEMBER_TBL m2, USER_ROLES r2
		
		WHERE r2.USERNAME = m2.ID
		AND r2.USERNAME = m3.ID ) AS "ROLE"
		FROM MEMBER_TBL m3, USER_ROLES r3
		
		WHERE m3.ID = r3.USERNAME  
		동등 조인 조건 (username 은 id다)  
		<if test="searchKey == 'ADDRESS'">
			AND ROAD_ADDRESS LIKE '%${searchWord}%'
			OR JIBUN_ADDRESS LIKE '%${searchWord}%'
			OR DETAIL_ADDRESS LIKE '%${searchWord}%'
		</if>
		 
     
    
		<if test="searchKey != 'ADDRESS' and isLikeOrEquals == 'like'">
			AND ${searchKey} LIKE '%${searchWord}'
		</if>
		<if test="searchKey != 'ADDRESS' and isLikeOrEquals == 'equals'">
			AND ${searchKey} = #{searchWord}
		</if>
			ORDER BY ID ${ordering} ) m 	)
			WHERE PAGE = #{page}
			이너 쿼리 복잡한 경우 간혹가다 에러 -> map쓰면 괜찮
		</select> -->
 

<!-- 회원정보 검색(페이징) : 주소, 이름, 성별, (휴대폰), 일반전화, (이메일) -->
	<select id="selectMembersBySearchingAndPaging" 
			parameterType="map" 
			resultType="map">
		SELECT  *
		  FROM ( SELECT m.*  
		                , FLOOR((ROWNUM - 1) / #{limit} + 1) PAGE  
		           FROM ( SELECT DISTINCT m3.* 
		                         , ( SELECT LISTAGG(r2.ROLE, ',') 
		                                      WITHIN GROUP (ORDER BY m2.ID) 
		                               FROM MEMBER_TBL m2, USER_ROLES r2  
		                              WHERE r2.USERNAME = m2.ID
		                                AND r2.USERNAME = m3.ID ) AS "ROLE"           
		                    FROM MEMBER_TBL m3, USER_ROLES r3
		                   WHERE m3.ID = r3.USERNAME
		                   <if test="searchKey == 'ADDRESS'">
					         AND ROAD_ADDRESS LIKE '%${searchWord}%'
		                      OR JIBUN_ADDRESS LIKE '%${searchWord}%'
				              OR DETAIL_ADDRESS LIKE '%${searchWord}%'
		                   </if>
		                   <if test="searchKey != 'ADDRESS' and isLikeOrEquals == 'like'">
		                     AND ${searchKey} LIKE '%${searchWord}%'
		                   </if>
		                   <if test="searchKey != 'ADDRESS' and isLikeOrEquals == 'equals'">
		                     AND ${searchKey} = #{searchWord}
		                   </if>
		                   ORDER BY ID ${ordering} ) m
		       )  
		 WHERE PAGE = #{page}
	</select>
	
	<!-- 개별 회원 정보 조회(검색)-2 : 롤(role) 정보 포함, 아이디/이메일/휴대폰 -->
	<select id="selectMemberByFld" 
			parameterType="map"
			resultType="map">
			
		SELECT DISTINCT m3.* 
                       , ( SELECT LISTAGG(r2.ROLE, ',') 
                                    WITHIN GROUP (ORDER BY m2.ID) 
                          FROM MEMBER_TBL m2, USER_ROLES r2  
                          WHERE r2.USERNAME = m2.ID
                          AND r2.USERNAME = m3.ID ) AS "ROLE"       
                              
       	            FROM MEMBER_TBL m3, USER_ROLES r3
       	                WHERE m3.ID = r3.USERNAME
				    AND ${fld} = #{val}
				    
			    <!-- 회원 롤(Role) 생성 -->
	<insert id="insertRole" parameterType="map">
		INSERT INTO 
		   USER_ROLES 
		   VALUES
		   (
		       USER_ROLES_SEQ.NEXTVAL
		       , #{id}       
		       , #{role}
		   )
		   </insert>
	</select>
</mapper> 