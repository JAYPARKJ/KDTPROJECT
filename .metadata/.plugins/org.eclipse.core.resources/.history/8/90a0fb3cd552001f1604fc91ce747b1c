package com.javateam.memberProject.repository;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.Date;
/*
데이터 접근 객체(DAO : Data Access Object)
DAO에서는 SQL문을 구현한 XML파일에서의 해당 ID값을 호출하여 데이터 조회하거나 조작한다
  
*/
// hamcrest assertj 
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;

import com.javateam.memberProject.domain.MemberVO;

public interface MemberDAO {
	/**
	 * 개별 회원정보 조회(검색)
	 * 
	 * @param id 회원 아이디
	 * @return 회원정보
	 */
	MemberVO selectMemberById(String id);
	List<MemberVO> selectAllMembers();
	
	// 여기서 VO는 DTO역할, 원래는 database relation 결과값을 갖고 있는 불변객체 (setter가 있을 수없으나)
	/*
	 * 회원정보 삽입(생성)
	 * @param memberVO 회원정보
	 * return 값이 나오면 판정하기 좋다.
	 * @return 삽입된(생성된) 레코드 수 ex) 1(레코드 생성), 0(레코드 미생성)  
	 * */
	// 	void insertMember(MemberVO memberVO);
	// 판정시 int로 
	//int insertMember(MemberVO memberVO);
	boolean insertMember(MemberVO memberVO);
	//int insertMember(MemberVO memberVO);
	
	/*
	 * 회원 정보 수정(갱신)
	 *
	 *@param memberVO 회원정보
	 *@return 회원 정보 수정(갱신) 성공 여부
	 * */
	boolean updateMember(MemberVO memberVO);
	// String으로 대체해도 됨
 		
	 /**회원 정보 중복 점검 (회원가입시)
	 * ex) 중복 점검 대상 : 아이디, 이메일, 휴대폰번호 
	 * @param fld : 중복점검 대상 필드 
	 * @param val : 중복점검 대상 필드 값
	 * @return 중복 여부 : ex)true 중복 X false 
	 * 
	 */
	// 순서 mapper-> DAO ->  구현 클래스

	boolean hasMemberByFld(String fld, String val);
	  
	
	boolean hasMemberForUpdate(String id, String fld, String val);
		/* 회원 정보 검색(페이징) : 주소, 이름, 성별, 휴대폰, 일반전화, 이메일
		 * @param serachKey 검색 구분(종목) ex) ADDRESS(주소)
		 * @param searchWord 검색어 ex) 신림
		 * @param page 현재 페이지 ex)1
		 * @param limit 페이지당 레도크 수 ex)10
		 * @param isLikeOrEquals 동등/유사검색 여부 ex) like(유사), equals(동등)
		 * @param ordering 정렬 ex) ASC(오름차순), DESC(내림차순)
		 * @return (검색된) 회원정보
		 * 
		 */
 
	
		/*
		 * List<Map<String, Object>> selectMembersBySearchingAndPaging (String
		 * searchKey, String searchWord, int page, int limit, String isLikeOrEquals,
		 * String ordering);
		 */
	List<Map<String, Object>> selectMembersBySearchingAndPaging(
		    String searchKey,
			String searchWord, int page, int limit, 
			String isLikeOrEquals, String ordering);
		
	/***
	 * 개별 회원정보 조회(검색)-2 : 롤(role) 정보 포함
	 * 
	 * @param fld 필드 ex) 회원 아이디/이메일/휴대폰
	 * @param val 핃드값 ex) 'abcd1111'/abcd@abcd.com/010-1234-5678
	 * @return 회원 정보 	
	 */
	 Map<String, Object> selectMemberByFld(String fld, Object val);
	 /** 24.08.05
	  * 개별 회원 롤(Role) 생성
	  * @param id 회원 아이디
	  * @param role 롤 ex) ROLE_USER, ROLE_ADMIN
	  * @return 생성 성공여부
	  */
	 boolean insertRole(String id, String role);
	 
	 @Autowired
		MemberDAO memberDAO;
		
		MemberVO memberVO;
		
		// 삽입(생성)할 회원정보 준비
		@BeforeEach
		public void setUp() {
			
			// howto-1)
			//memberVO = new MemberVO();
			//memberVO.setId("abcd1111");
			//중략
			
			// howto-2)
			// memberVO = new MemberVO("abcd1111", "#Abcd1234", ...)
			
			// howto-3)
			memberVO = MemberVO.builder()
							   .id("abcd1111")
							   .pw("#Abcd1234")
							   .name("홍길동")
							   .gender("m")
							   .email("abcd1111@abcd.com")
							   .mobile("010-1111-3333")
							   .phone("02-1111-2222")
							   .zip("08290")
							   .roadAddress("서울특별시 관악구 신림로 340")
							   .jibunAddress("서울특별시 관악구 신림동 1422-5 르네상스 복합쇼핑몰")
							   .detailAddress("6층 MBC 아카데미")
							   .birthday(Date.valueOf("2000-01-01"))
							   //.joindate(new Date(System.currentTimeMillis()))
							   .build();
		}			
		
		
	 
	 
		// case-1 ) 주어진 회원정보 (MemberVO) 테이블에서 레코드 생성 점검
		// case1-1) 트랜잭션 활용 롤백(rollback) => 실제 테이블 영향(X)
		// => 테스트 !
		// case-1-2) 판정 시 assertXXX 정확한 판정(단언) 결과값이 필요!
		@Transactional
		@Rollback(true) // rollback은 테스트며 안쓰거나 그러면 커밋된다.true => 취소(rollback), false => 반영(commit)
		@Test
		void testInsertMember() {
	    
				log.info("memberVO : {}", memberVO );
				// 이후 판정 남
				//memberDAO.insertMember(memberVO); // true / false로 정리 
				
				boolean result = memberDAO.insertMember(memberVO);
				//assertTrue(result == 1? true : false);
				//assertEquals(1, result);
				
				// int result = memberDAO.insertMember(memberVO);
				// 동의어(햄크레스트표현)
				// import static org.hamcrest.CoreMatchers.*;
				// assertThat(1, equalTo(result));
				assertTrue(result);
				
				 
				 
	}
		 
		
		//CASE-2) 존재하지 않는 ID(abcd3333)에 대한 관리자 를(ROLE_USER)을 할당 기대값 => false
		@Transactional
		@Rollback(true)
		@Test
		void testInsertRole2() {
			assertFalse(memberDAO.insertRole("abcd3333", "ROLE_USER"));
		}
}
